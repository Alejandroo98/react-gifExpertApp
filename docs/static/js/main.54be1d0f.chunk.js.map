{"version":3,"sources":["components/SearchGifs.js","helpers/getGifs.js","components/GifGridItem.js","components/GifGrid.js","hooks/useFetchGif.js","GifExpertApp.js","index.js"],"names":["AddCategory","setCategories","useState","inputValue","setInputValue","onSubmit","e","preventDefault","trim","length","cate","type","value","onChange","target","placeholder","getGifs","category","a","url","encodeURI","fetch","res","json","data","gifs","map","id","title","images","downsized_medium","GifGridItem","className","src","alt","GifGrid","loading","state","setState","useEffect","then","imgs","setTimeout","useFetchGifs","img","GifExpertApp","categories","ReactDOM","render","document","getElementById"],"mappings":"mMAGaA,EAAc,SAAC,GAAuB,IAArBC,EAAoB,EAApBA,cAE5B,EAAoCC,mBAAS,IAA7C,mBAAOC,EAAP,KAAmBC,EAAnB,KAwBA,OACE,sBAAMC,SAnBa,SAACC,GAKpBA,EAAEC,iBAEEJ,EAAWK,OAAOC,OAAS,IAK7BR,GAAc,SAACS,GAAD,OAAWP,GAAX,mBAA0BO,OAExCN,EAAc,MAKhB,SACE,uBAAOO,KAAK,SAASC,MAAOT,EAAYU,SAxBnB,SAACP,GACxBF,EAAcE,EAAEQ,OAAOF,QAuB+CG,YAAY,qB,+BC1BzEC,EAAO,uCAAG,WAAOC,GAAP,uBAAAC,EAAA,6DAEfC,EAFe,iDAEiCC,UACpDH,GAHmB,+DAKHI,MAAMF,GALH,cAKfG,EALe,gBAMEA,EAAIC,OANN,uBAMbC,EANa,EAMbA,KAEFC,EAAOD,EAAKE,KAChB,YAOE,MAAO,CACLC,GAFE,EALJA,GAQEC,MAHE,EAJJA,MAQET,IAJE,EAHJU,OACEC,iBAAoBX,QAbL,kBAwBdM,GAxBc,4CAAH,sDCHPM,EAAc,SAAC,GAAuB,EAArBJ,GAAsB,IAAlBC,EAAiB,EAAjBA,MAAOT,EAAU,EAAVA,IACvC,OACE,sBAAKa,UAAU,yCAAf,UACE,qBAAKC,IAAKd,EAAKe,IAAKN,IACpB,4BAAIA,QCAGO,EAAU,SAAC,GAAkB,IAAhBlB,EAAe,EAAfA,SAQxB,ECV0B,SAACA,GAC3B,MAA0Bf,mBAAS,CACjCsB,KAAM,GACNY,SAAS,IAFX,mBAAOC,EAAP,KAAcC,EAAd,KAgBA,OAXAC,qBAAU,WACRvB,EAAQC,GAAUuB,MAAK,SAACC,GACtBC,YAAW,WACTJ,EAAS,CACPd,KAAMiB,EACNL,SAAS,MAEV,UAEJ,CAACnB,IAEGoB,EDP2BM,CAAa1B,GAAjCY,EAAd,EAAQL,KAAcY,EAAtB,EAAsBA,QAEtB,OACE,qCACE,oBAAIJ,UAAU,oCAAd,SAAmDf,IAClDmB,GAAW,mBAAGJ,UAAU,mCAAb,yBACZ,qBAAKA,UAAU,YAAf,SACGH,EAAOH,KAAI,SAACkB,GAAD,OACV,cAAC,EAAD,eAA8BA,GAAZA,EAAIjB,aElBjB,SAASkB,IAGtB,MAAoC3C,mBAAS,CAAC,YAA9C,mBAAO4C,EAAP,KAAmB7C,EAAnB,KACA,OACE,qCACE,sBAAK+B,UAAU,SAAf,UACE,8BACE,gDAEF,cAAC,EAAD,CAAa/B,cAAeA,OAK9B,6BACG6C,EAAWpB,KAAI,SAACT,GAAD,OAGd,aAFA,CAEC,EAAD,CAAwBA,SAAUA,GAApBA,W,MCjBxB8B,IAASC,OAAO,cAACH,EAAD,IAAkBI,SAASC,eAAe,W","file":"static/js/main.54be1d0f.chunk.js","sourcesContent":["import React, { useState } from 'react';\r\nimport PropTypes from 'prop-types';\r\n\r\nexport const AddCategory = ({ setCategories }) => {\r\n  //Este useState serviara para editar el \"value\" del input nada mas.\r\n  const [inputValue, setInputValue] = useState('');\r\n\r\n  const handleInutChange = (e) => {\r\n    setInputValue(e.target.value);\r\n  };\r\n\r\n  const handleSubmit = (e) => {\r\n    //•Esta funcion se ejecutara cuando se presione enter para enviar la busqueda o el \"value\" del input.\r\n    //•inputValue es la palabra ingesada con el evento onChange en la funcion llamada \"handleInutChange\", recuedas que la informacion la\r\n    //agregamos por medio de la funcion handleInutChange() y no modificamos su constante directemente.\r\n    //•inputValue.trim() simplemente es para eliminar los espacios en la palabra en caso hayan\r\n    e.preventDefault();\r\n\r\n    if (inputValue.trim().length > 2) {\r\n      //• \"setCategories\" es la funcion del otro setState() proveniente de el archivo llamado GifExpertApp.js, recueda que lo que hace esto\r\n      // es modificar su constante pero por medio de una funcion el parametro que le pasemos a esta fucnion sera su nuevo valor\r\n      //• Lo que hace aqui \"setCategories()\" es agregale el nuevo valor que fue ingresado por medio del input y mantener los anteriores --> ..cate\r\n      //• \"cate\" son todas las categorias ingresadas previamente.\r\n      setCategories((cate) => [inputValue, ...cate]);\r\n      //• Nuevamente, recuerda que modificamos el valor de la constante por medio de su funcion \"setInputValue()\", en este caso lo que hacemos en input\r\n      setInputValue('');\r\n    }\r\n  };\r\n\r\n  return (\r\n    <form onSubmit={handleSubmit}>\r\n      <input type=\"search\" value={inputValue} onChange={handleInutChange} placeholder=\"Serach Gif...\" />\r\n    </form>\r\n  );\r\n};\r\n\r\nAddCategory.propTypes = {\r\n  setCategories: PropTypes.func.isRequired,\r\n};\r\n","/* De estos enlaces saque el link y el api_key que necesitaremos para poder utiliar esta api */\r\n// https://developers.giphy.com/docs/api/endpoint/#search ==>  api.giphy.com/v1/gifs/search\r\n//https://developers.giphy.com/dashboard/ ==> fHXyXDuaudwi8K0Cb9MpmJ5ibYWx1QY0\r\n\r\n/* === AQUI LO UNICO QUE HACEMOS ES HACER LA PETICION Y YA ESTA === */\r\nexport const getGifs = async (category) => {\r\n  //El encodeURI() es para eliminar espacios por ejemplo, bueno nos ayuda aque lo que vamos abuscar este limpio\r\n  const url = `https://api.giphy.com/v1/gifs/search?q=${encodeURI(\r\n    category\r\n  )}&limit=10&api_key=fHXyXDuaudwi8K0Cb9MpmJ5ibYWx1QY0`;\r\n  const res = await fetch(url);\r\n  const { data } = await res.json();\r\n\r\n  const gifs = data.map(\r\n    ({\r\n      id,\r\n      title,\r\n      images: {\r\n        downsized_medium: { url },\r\n      },\r\n    }) => {\r\n      return {\r\n        id,\r\n        title,\r\n        url,\r\n      };\r\n    }\r\n  );\r\n\r\n  return gifs;\r\n};\r\n","import React from 'react';\r\n\r\nexport const GifGridItem = ({ id, title, url }) => {\r\n  return (\r\n    <div className=\"card animate__animated animate__fadeIn\">\r\n      <img src={url} alt={title} />\r\n      <p>{title}</p>\r\n    </div>\r\n  );\r\n};\r\n","\r\nimport React from 'react'; //rafc\r\nimport { useFetchGifs } from '../hooks/useFetchGif';\r\n// import { getGifs } from '../helpers/getGifs';\r\nimport { GifGridItem } from './GifGridItem';\r\n\r\nexport const GifGrid = ({ category }) => {\r\n  // const [images, setImages] = useState([]);\r\n  // //getGifs() se ejecutrara una sola vez cuando el componente se ejecute por primera vez. Para eso sirve useEffect(())\r\n  // useEffect(() => {\r\n  //   getGifs(category).then((imgs) => setImages(imgs));\r\n  //   // .then(setImages)     //Esto es lo mismo de arriba pero mas simplificado\r\n  // }, [category]); //Si category cambia si que volvera a ejecutar esata funcion\r\n\r\n  const { data: images, loading } = useFetchGifs(category);\r\n\r\n  return (\r\n    <>\r\n      <h3 className=\"animate__animated animate__fadeIn\">{category}</h3>\r\n      {loading && <p className=\"animate__animated animate__flash\">Cargando...</p>}\r\n      <div className=\"card-grid\">\r\n        {images.map((img) => (\r\n          <GifGridItem key={img.id} {...img} />\r\n        ))}\r\n      </div>\r\n    </>\r\n  );\r\n};\r\n\r\n/*================ FIN DE LA SECCION 22/05/2021.  lINK DEL REPO -> https://github.com/Klerith/react-giphy-app/releases/tag/v0.6.0 ================*/\r\n","//Los hooks no son mas que funciones\r\nimport { useEffect, useState } from 'react';\r\nimport { getGifs } from '../helpers/getGifs';\r\n\r\nexport const useFetchGifs = (category) => {\r\n  const [state, setState] = useState({\r\n    data: [],\r\n    loading: true,\r\n  });\r\n\r\n  useEffect(() => {\r\n    getGifs(category).then((imgs) => {\r\n      setTimeout(() => {\r\n        setState({\r\n          data: imgs,\r\n          loading: false,\r\n        });\r\n      }, 2000);\r\n    });\r\n  }, [category]);\r\n\r\n  return state; //{data: [] ,loading: true}\r\n};\r\n","import React, { useState } from 'react';\r\nimport { AddCategory } from './components/SearchGifs';\r\nimport { GifGrid } from './components/GifGrid';\r\n\r\nexport default function GifExpertApp() {\r\n  //Por defecto buscara Ecuador, recuerda que toda\r\n  //esta informacio en forma de arreglo se guardara en categories en el useState\r\n  const [categories, setCategories] = useState(['Ecuador']);\r\n  return (\r\n    <>\r\n      <div className=\"navBar\">\r\n        <div>\r\n          <h1>GifExpertApp</h1>\r\n        </div>\r\n        <AddCategory setCategories={setCategories} />\r\n      </div>\r\n\r\n      {/* Esto lo que hara es enviarle setCategories para que agerge por medio de un input una nueva categoria y sea buscada */}\r\n\r\n      <ol>\r\n        {categories.map((category) => (\r\n          /* Recuerda que  \"categories\" es un arreglo que contiene todas las categorias ingresadas por lo\r\n           tanto usamos un \"map\" para buscar a todas las categorias y que por cada una de estas renderize un nuevo coponente*/\r\n          <GifGrid key={category} category={category} />\r\n        ))}\r\n      </ol>\r\n    </>\r\n  );\r\n}\r\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { Navbar } from './components/Navbar';\nimport GifExpertApp from './GifExpertApp';\nimport './index.css';\n\nReactDOM.render(<GifExpertApp />, document.getElementById('root'));\n\n/* Ultimo video que vi C.69 -> https://www.udemy.com/course/react-cero-experto/learn/lecture/19751398#questions/13223762 */\n\n//Documentacion para esta app -> https://es.reactjs.org/docs/faq-structure.html\n//Documentacion de directorios -> https://hackernoon.com/structuring-projects-and-naming-components-in-react-1261b6e18d76\n"],"sourceRoot":""}